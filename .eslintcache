[{"/home/beto/Área de Trabalho/routes-react/router/src/index.js":"1","/home/beto/Área de Trabalho/routes-react/router/src/App.js":"2","/home/beto/Área de Trabalho/routes-react/router/src/routes/routes.js":"3","/home/beto/Área de Trabalho/routes-react/router/src/services/auth/auth.js":"4","/home/beto/Área de Trabalho/routes-react/router/src/components/appBar/AppBarComponent.js":"5","/home/beto/Área de Trabalho/routes-react/router/src/components/drawer/DrawerComponent.js":"6"},{"size":147,"mtime":1610649515190,"results":"7","hashOfConfig":"8"},{"size":116,"mtime":1610652131005,"results":"9","hashOfConfig":"8"},{"size":800,"mtime":1610654156474,"results":"10","hashOfConfig":"8"},{"size":42,"mtime":1610651188963,"results":"11","hashOfConfig":"8"},{"size":3013,"mtime":1610664564764,"results":"12","hashOfConfig":"8"},{"size":4047,"mtime":1610657254923,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"jprfh7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/home/beto/Área de Trabalho/routes-react/router/src/index.js",[],["28","29"],"/home/beto/Área de Trabalho/routes-react/router/src/App.js",[],"/home/beto/Área de Trabalho/routes-react/router/src/routes/routes.js",[],"/home/beto/Área de Trabalho/routes-react/router/src/services/auth/auth.js",[],"/home/beto/Área de Trabalho/routes-react/router/src/components/appBar/AppBarComponent.js",["30","31"],"/home/beto/Área de Trabalho/routes-react/router/src/components/drawer/DrawerComponent.js",["32","33","34","35","36"],"import React, {useState} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst drawerWidth = 240;\n\nexport default function PersistentDrawerLeft(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = useState(props.open);\n\n  const handleDrawerClose = () => {\n    props.onChangeOpen(false);\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  }),\n);",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":22,"nodeType":"43","messageId":"44","endLine":2,"endColumn":30},{"ruleId":"41","severity":1,"message":"45","line":8,"column":8,"nodeType":"43","messageId":"44","endLine":8,"endColumn":14},{"ruleId":"41","severity":1,"message":"46","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":12},{"ruleId":"41","severity":1,"message":"47","line":6,"column":8,"nodeType":"43","messageId":"44","endLine":6,"endColumn":14},{"ruleId":"41","severity":1,"message":"48","line":7,"column":8,"nodeType":"43","messageId":"44","endLine":7,"endColumn":15},{"ruleId":"41","severity":1,"message":"49","line":9,"column":8,"nodeType":"43","messageId":"44","endLine":9,"endColumn":18},{"ruleId":"41","severity":1,"message":"50","line":12,"column":8,"nodeType":"43","messageId":"44","endLine":12,"endColumn":16},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'clsx' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'MenuIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]